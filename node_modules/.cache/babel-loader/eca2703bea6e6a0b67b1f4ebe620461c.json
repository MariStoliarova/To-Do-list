{"ast":null,"code":"var _jsxFileName = \"/Users/nikitastolarov/Desktop/my-app/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState([1, 2, 3, 4, 5]);\n  const [editNum, setEditNum] = useState(null);\n  const [value, setValue] = useState('');\n  const result = notes.map((note, index) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: () => setEditNum(index),\n      children: note\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }, this);\n  });\n\n  function changeItem(event) {\n    setNotes([...notes.slice(0, editNum), event.target.value, ...notes.slice(editNum + 1)]);\n  }\n\n  function stopEdit(event) {\n    setEditNum(null);\n  }\n\n  function changeValue(event) {\n    setValue(event.target.value);\n  }\n\n  function addItem(event) {\n    setNotes([...notes, value]);\n  }\n\n  let input;\n\n  if (editNum) {\n    input = /*#__PURE__*/_jsxDEV(\"input\", {\n      value: notes[editNum],\n      onChange: changeItem,\n      onBlur: stopEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this);\n  } else {\n    input = /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      onChange: changeValue,\n      onBlur: addItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [result, input]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"s/1PMxz8nQeNpcKAqDiiIf3wznY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nikitastolarov/Desktop/my-app/src/App.jsx"],"names":["React","useState","App","notes","setNotes","editNum","setEditNum","value","setValue","result","map","note","index","changeItem","event","slice","target","stopEdit","changeValue","addItem","input"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAD,CAAlC;AACH,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMQ,MAAM,GAAGN,KAAK,CAACO,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzC,wBAAO;AAAe,MAAA,OAAO,EAAE,MAAMN,UAAU,CAACM,KAAD,CAAxC;AAAA,gBACLD;AADK,OAAQC,KAAR;AAAA;AAAA;AAAA;AAAA,YAAP;AAGA,GAJc,CAAf;;AAMA,WAASC,UAAT,CAAoBC,KAApB,EAA2B;AAC1BV,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAACY,KAAN,CAAY,CAAZ,EAAeV,OAAf,CAAJ,EAA6BS,KAAK,CAACE,MAAN,CAAaT,KAA1C,EAAgD,GAAGJ,KAAK,CAACY,KAAN,CAAYV,OAAO,GAAG,CAAtB,CAAnD,CAAD,CAAR;AACA;;AACD,WAASY,QAAT,CAAkBH,KAAlB,EAAyB;AACxBR,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA;;AAED,WAASY,WAAT,CAAqBJ,KAArB,EAA4B;AAC3BN,IAAAA,QAAQ,CAACM,KAAK,CAACE,MAAN,CAAaT,KAAd,CAAR;AACA;;AACD,WAASY,OAAT,CAAiBL,KAAjB,EAAwB;AACvBV,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWI,KAAX,CAAD,CAAR;AACA;;AAED,MAAIa,KAAJ;;AACA,MAAIf,OAAJ,EAAa;AACZe,IAAAA,KAAK,gBAAG;AACP,MAAA,KAAK,EAAEjB,KAAK,CAACE,OAAD,CADL;AAEP,MAAA,QAAQ,EAAEQ,UAFH;AAGP,MAAA,MAAM,EAAEI;AAHD;AAAA;AAAA;AAAA;AAAA,YAAR;AAKA,GAND,MAMO;AACNG,IAAAA,KAAK,gBAAG;AACP,MAAA,KAAK,EAAEb,KADA;AAEP,MAAA,QAAQ,EAAEW,WAFH;AAGP,MAAA,MAAM,EAAEC;AAHD;AAAA;AAAA;AAAA;AAAA,YAAR;AAKA;;AAED,sBAAO;AAAA,eACLV,MADK,EAELW,KAFK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIA;;GA5CQlB,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\n\n\nfunction App() {\n    const [notes, setNotes] = useState([1, 2, 3, 4, 5]);\n\tconst [editNum, setEditNum] = useState(null);\n\tconst [value, setValue] = useState('');\n\t\n\tconst result = notes.map((note, index) => {\n\t\treturn <p key={index} onClick={() => setEditNum(index)}>\n\t\t\t{note}\n\t\t</p>;\n\t});\n\t\n\tfunction changeItem(event) {\n\t\tsetNotes([...notes.slice(0, editNum), event.target.value,...notes.slice(editNum + 1)]);\n\t}\n\tfunction stopEdit(event) {\n\t\tsetEditNum(null);\n\t}\n\t\n\tfunction changeValue(event) {\n\t\tsetValue(event.target.value)\n\t}\n\tfunction addItem(event) {\n\t\tsetNotes([...notes, value]);\n\t}\n\t\n\tlet input;\n\tif (editNum) {\n\t\tinput = <input\n\t\t\tvalue={notes[editNum]}\n\t\t\tonChange={changeItem}\n\t\t\tonBlur={stopEdit}\n\t\t/>\n\t} else {\n\t\tinput = <input\n\t\t\tvalue={value}\n\t\t\tonChange={changeValue}\n\t\t\tonBlur={addItem}\n\t\t/>\n\t}\n\t\n\treturn <div>\n\t\t{result}\n\t\t{input}\n\t</div>;\n}\nexport default App; \n\n"]},"metadata":{},"sourceType":"module"}